/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.nwissuesjan25.wmstudio.*;


/**
 * ServiceImpl object for domain model class JobHistory.
 * @see com.nwissuesjan25.wmstudio.JobHistory
 */
@Service("WMSTUDIO.JobHistoryService")
public class JobHistoryServiceImpl implements JobHistoryService {


    private static final Logger LOGGER = LoggerFactory.getLogger(JobHistoryServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.JobHistoryDao")
    private WMGenericDao<JobHistory, JobHistoryId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JobHistory, JobHistoryId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
     public Page<JobHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public JobHistory create(JobHistory jobhistory) {
        LOGGER.debug("Creating a new jobhistory with information: {}" , jobhistory);
        return this.wmGenericDao.create(jobhistory);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public JobHistory delete(JobHistoryId jobhistoryId) throws EntityNotFoundException {
        LOGGER.debug("Deleting jobhistory with id: {}" , jobhistoryId);
        JobHistory deleted = this.wmGenericDao.findById(jobhistoryId);
        if (deleted == null) {
            LOGGER.debug("No jobhistory found with id: {}" , jobhistoryId);
            throw new EntityNotFoundException(String.valueOf(jobhistoryId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JobHistory> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all jobhistorys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<JobHistory> findAll(Pageable pageable) {
        LOGGER.debug("Finding all jobhistorys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public JobHistory findById(JobHistoryId id) throws EntityNotFoundException {
        LOGGER.debug("Finding jobhistory by id: {}" , id);
        JobHistory jobhistory=this.wmGenericDao.findById(id);
        if(jobhistory==null){
            LOGGER.debug("No jobhistory found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return jobhistory;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public JobHistory update(JobHistory updated) throws EntityNotFoundException {
        LOGGER.debug("Updating jobhistory with information: {}" , updated);
        this.wmGenericDao.update(updated);

        JobHistoryId id = new JobHistoryId();
        id.setEmployeeId(updated.getEmployeeId());
        id.setStartDate(updated.getStartDate());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}



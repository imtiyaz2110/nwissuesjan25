/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.nwissuesjan25.wmstudio.*;


/**
 * ServiceImpl object for domain model class Table9.
 * @see com.nwissuesjan25.wmstudio.Table9
 */
@Service("WMSTUDIO.Table9Service")
public class Table9ServiceImpl implements Table9Service {


    private static final Logger LOGGER = LoggerFactory.getLogger(Table9ServiceImpl.class);

    @Autowired
    @Qualifier("WMSTUDIO.Table9Dao")
    private WMGenericDao<Table9, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Table9, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
     public Page<Table9> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "WMSTUDIOTransactionManager")
    @Override
    public Table9 create(Table9 table9) {
        LOGGER.debug("Creating a new table9 with information: {}" , table9);
        return this.wmGenericDao.create(table9);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Table9 delete(BigDecimal table9Id) throws EntityNotFoundException {
        LOGGER.debug("Deleting table9 with id: {}" , table9Id);
        Table9 deleted = this.wmGenericDao.findById(table9Id);
        if (deleted == null) {
            LOGGER.debug("No table9 found with id: {}" , table9Id);
            throw new EntityNotFoundException(String.valueOf(table9Id));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Table9> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all table9s");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Page<Table9> findAll(Pageable pageable) {
        LOGGER.debug("Finding all table9s");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public Table9 findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding table9 by id: {}" , id);
        Table9 table9=this.wmGenericDao.findById(id);
        if(table9==null){
            LOGGER.debug("No table9 found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return table9;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "WMSTUDIOTransactionManager")
    @Override
    public Table9 update(Table9 updated) throws EntityNotFoundException {
        LOGGER.debug("Updating table9 with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "WMSTUDIOTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}



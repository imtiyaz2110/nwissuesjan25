/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.nwissuesjan25.wmstudio.service.Table10Service;
import java.math.BigDecimal;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.nwissuesjan25.wmstudio.*;
import com.nwissuesjan25.wmstudio.service.*;


/**
 * Controller object for domain model class Table10.
 * @see com.nwissuesjan25.wmstudio.Table10
 */

@RestController(value = "WMSTUDIO.Table10Controller")
@Api(value = "/WMSTUDIO/Table10", description = "Exposes APIs to work with Table10 resource.")
@RequestMapping("/WMSTUDIO/Table10")
public class Table10Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table10Controller.class);

	@Autowired
	@Qualifier("WMSTUDIO.Table10Service")
	private Table10Service table10Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Table10 instances matching the search criteria.")
	public Page<Table10> findTable10s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Table10s list");
		return table10Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Table10 instances.")
	public Page<Table10> getTable10s(Pageable pageable) {
		LOGGER.debug("Rendering Table10s list");
		return table10Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Table10 instances.")
	public Long countAllTable10s() {
		LOGGER.debug("counting Table10s");
		Long count = table10Service.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table10 instance associated with the given id.")
    public Table10 getTable10(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table10 with id: {}" , id);
        Table10 instance = table10Service.findById(id);
        LOGGER.debug("Table10 details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table10 instance associated with the given id.")
    public boolean deleteTable10(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table10 with id: {}" , id);
        Table10 deleted = table10Service.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table10 instance associated with the given id.")
    public Table10 editTable10(@PathVariable("id") BigDecimal id, @RequestBody Table10 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table10 with id: {}" , instance.getId());
        instance.setId(id);
        instance = table10Service.update(instance);
        LOGGER.debug("Table10 details with id: {}" , instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @ApiOperation(value = "Updates the Table10 instance associated with the given id.This API should be used when Table10 instance fields that require multipart data.")
    public Table10 editTable10(@PathVariable("id") BigDecimal id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        Table10 newtable10 = WMMultipartUtils.toObject(multipartHttpServletRequest,Table10.class,"WMSTUDIO");
        newtable10.setId(id);
        Table10 oldtable10 = table10Service.findById(id);
        WMMultipartUtils.updateLobsContent(oldtable10,newtable10);
        LOGGER.debug("Updating table10 with information: {}" , newtable10);
        return table10Service.update(newtable10);
    }
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @ApiOperation(value = "Retrieves content for the given BLOB field in Table10 instance" )
    public DownloadResponse getTable10BLOBContent(@PathVariable("id") BigDecimal id,@PathVariable("fieldName") String fieldName,HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam( value="download", defaultValue = "false") boolean download) {
        LOGGER.debug("Retrieves content for the given BLOB field {} in Table10 instance" , fieldName);
        if(!WMRuntimeUtils.isLob(Table10.class,fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        Table10 instance = table10Service.findById(id);
        return WMMultipartUtils.buildDownloadResponseForBlob(instance, fieldName, httpServletRequest, download);
    }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Table10 instance.")
	public Table10 createTable10(@RequestBody Table10 instance) {
		LOGGER.debug("Create Table10 with information: {}" , instance);
		instance = table10Service.create(instance);
		LOGGER.debug("Created Table10 with information: {}" , instance);
	    return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST, consumes = {"multipart/form-data"})
	@ApiOperation(value = "Creates a new Table10 instance.This API should be used when the Table10 instance has fields that requires multipart data.")
    public Table10 createTable10(MultipartHttpServletRequest multipartHttpServletRequest) {
    	Table10 table10 = WMMultipartUtils.toObject(multipartHttpServletRequest,Table10.class,"WMSTUDIO");
        LOGGER.debug("Creating a new table10 with information: {}" , table10);
        return table10Service.create(table10);
    }

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTable10Service(Table10Service service) {
		this.table10Service = service;
	}
}


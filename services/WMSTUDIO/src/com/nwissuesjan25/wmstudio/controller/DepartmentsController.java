/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.nwissuesjan25.wmstudio.service.DepartmentsService;
import com.nwissuesjan25.wmstudio.service.EmployeesService;
import com.nwissuesjan25.wmstudio.service.JobHistoryService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.nwissuesjan25.wmstudio.*;
import com.nwissuesjan25.wmstudio.service.*;


/**
 * Controller object for domain model class Departments.
 * @see com.nwissuesjan25.wmstudio.Departments
 */

@RestController(value = "WMSTUDIO.DepartmentsController")
@Api(value = "/WMSTUDIO/Departments", description = "Exposes APIs to work with Departments resource.")
@RequestMapping("/WMSTUDIO/Departments")
public class DepartmentsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentsController.class);

	@Autowired
	@Qualifier("WMSTUDIO.DepartmentsService")
	private DepartmentsService departmentsService;


    @Autowired
    @Qualifier("WMSTUDIO.EmployeesService")
    private EmployeesService employeesService;


    @Autowired
    @Qualifier("WMSTUDIO.JobHistoryService")
    private JobHistoryService jobHistoryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Departments instances matching the search criteria.")
	public Page<Departments> findDepartmentss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Departmentss list");
		return departmentsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Departments instances.")
	public Page<Departments> getDepartmentss(Pageable pageable) {
		LOGGER.debug("Rendering Departmentss list");
		return departmentsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Departments instances.")
	public Long countAllDepartmentss() {
		LOGGER.debug("counting Departmentss");
		Long count = departmentsService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Departments instance associated with the given id.")
    public Departments getDepartments(@PathVariable("id") short id) throws EntityNotFoundException {
        LOGGER.debug("Getting Departments with id: {}" , id);
        Departments instance = departmentsService.findById(id);
        LOGGER.debug("Departments details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Departments instance associated with the given id.")
    public boolean deleteDepartments(@PathVariable("id") short id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Departments with id: {}" , id);
        Departments deleted = departmentsService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Departments instance associated with the given id.")
    public Departments editDepartments(@PathVariable("id") short id, @RequestBody Departments instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Departments with id: {}" , instance.getDepartmentId());
        instance.setDepartmentId(id);
        instance = departmentsService.update(instance);
        LOGGER.debug("Departments details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeesesForDepartmentId", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeesesForDepartmentId instance associated with the given id.")
     public Page<Employees> findAssociatedemployeesesForDepartmentId(Pageable pageable, @PathVariable("id") short id){
        LOGGER.debug("Fetching all associated employeesesForDepartmentId");
        return employeesService.findAssociatedValues(id,"departmentsByDepartmentId","departmentId", pageable);
   }

    @RequestMapping(value="/{id:.+}/jobHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the jobHistories instance associated with the given id.")
     public Page<JobHistory> findAssociatedjobHistories(Pageable pageable, @PathVariable("id") short id){
        LOGGER.debug("Fetching all associated jobHistories");
        return jobHistoryService.findAssociatedValues(id,"departments","departmentId", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Departments instance.")
	public Departments createDepartments(@RequestBody Departments instance) {
		LOGGER.debug("Create Departments with information: {}" , instance);
		instance = departmentsService.create(instance);
		LOGGER.debug("Created Departments with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDepartmentsService(DepartmentsService service) {
		this.departmentsService = service;
	}
}


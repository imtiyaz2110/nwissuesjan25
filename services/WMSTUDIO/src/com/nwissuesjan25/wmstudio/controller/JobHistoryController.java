/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.nwissuesjan25.wmstudio.service.JobHistoryService;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.nwissuesjan25.wmstudio.*;
import com.nwissuesjan25.wmstudio.service.*;


/**
 * Controller object for domain model class JobHistory.
 * @see com.nwissuesjan25.wmstudio.JobHistory
 */

@RestController(value = "WMSTUDIO.JobHistoryController")
@Api(value = "/WMSTUDIO/JobHistory", description = "Exposes APIs to work with JobHistory resource.")
@RequestMapping("/WMSTUDIO/JobHistory")
public class JobHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JobHistoryController.class);

	@Autowired
	@Qualifier("WMSTUDIO.JobHistoryService")
	private JobHistoryService jobHistoryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of JobHistory instances matching the search criteria.")
	public Page<JobHistory> findJobHistorys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering JobHistorys list");
		return jobHistoryService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of JobHistory instances.")
	public Page<JobHistory> getJobHistorys(Pageable pageable) {
		LOGGER.debug("Rendering JobHistorys list");
		return jobHistoryService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of JobHistory instances.")
	public Long countAllJobHistorys() {
		LOGGER.debug("counting JobHistorys");
		Long count = jobHistoryService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the JobHistory instance associated with the given composite-id.")
	public JobHistory getJobHistory( @RequestParam("employeeId") Integer employeeId, @RequestParam("startDate") Date startDate)
	 throws EntityNotFoundException {
	    JobHistoryId temp = new JobHistoryId();
	    temp.setEmployeeId(employeeId);
	    temp.setStartDate(startDate);
		LOGGER.debug("Getting JobHistory with id: {}" , temp);
		JobHistory instance = jobHistoryService.findById(temp);
		LOGGER.debug("JobHistory details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the JobHistory instance associated with the given composite-id.")
	public boolean deleteJobHistory( @RequestParam("employeeId") Integer employeeId, @RequestParam("startDate") Date startDate)throws EntityNotFoundException {
	    JobHistoryId temp = new JobHistoryId();
        temp.setEmployeeId(employeeId);
        temp.setStartDate(startDate);
		LOGGER.debug("Deleting JobHistory with id: {}" , temp);
		JobHistory deleted = jobHistoryService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the JobHistory instance associated with the given composite-id.")
	public JobHistory editJobHistory( @RequestParam("employeeId") Integer employeeId, @RequestParam("startDate") Date startDate, @RequestBody JobHistory instance) throws EntityNotFoundException {
	    JobHistoryId temp = new JobHistoryId();
         temp.setEmployeeId(employeeId);
         temp.setStartDate(startDate);
        jobHistoryService.delete(temp);
        instance = jobHistoryService.create(instance);
	    LOGGER.debug("JobHistory details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new JobHistory instance.")
	public JobHistory createJobHistory(@RequestBody JobHistory instance) {
		LOGGER.debug("Create JobHistory with information: {}" , instance);
		instance = jobHistoryService.create(instance);
		LOGGER.debug("Created JobHistory with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setJobHistoryService(JobHistoryService service) {
		this.jobHistoryService = service;
	}
}


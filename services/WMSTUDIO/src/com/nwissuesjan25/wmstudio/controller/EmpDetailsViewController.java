/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.nwissuesjan25.wmstudio.service.EmpDetailsViewService;
import java.math.BigDecimal;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.nwissuesjan25.wmstudio.*;
import com.nwissuesjan25.wmstudio.service.*;


/**
 * Controller object for domain model class EmpDetailsView.
 * @see com.nwissuesjan25.wmstudio.EmpDetailsView
 */

@RestController(value = "WMSTUDIO.EmpDetailsViewController")
@Api(value = "/WMSTUDIO/EmpDetailsView", description = "Exposes APIs to work with EmpDetailsView resource.")
@RequestMapping("/WMSTUDIO/EmpDetailsView")
public class EmpDetailsViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmpDetailsViewController.class);

	@Autowired
	@Qualifier("WMSTUDIO.EmpDetailsViewService")
	private EmpDetailsViewService empDetailsViewService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmpDetailsView instances matching the search criteria.")
	public Page<EmpDetailsView> findEmpDetailsViews( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmpDetailsViews list");
		return empDetailsViewService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmpDetailsView instances.")
	public Page<EmpDetailsView> getEmpDetailsViews(Pageable pageable) {
		LOGGER.debug("Rendering EmpDetailsViews list");
		return empDetailsViewService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmpDetailsView instances.")
	public Long countAllEmpDetailsViews() {
		LOGGER.debug("counting EmpDetailsViews");
		Long count = empDetailsViewService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the EmpDetailsView instance associated with the given composite-id.")
	public EmpDetailsView getEmpDetailsView( @RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") BigDecimal salary, @RequestParam("commissionPct") BigDecimal commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName)
	 throws EntityNotFoundException {
	    EmpDetailsViewId temp = new EmpDetailsViewId();
	    temp.setEmployeeId(employeeId);
	    temp.setJobId(jobId);
	    temp.setManagerId(managerId);
	    temp.setDepartmentId(departmentId);
	    temp.setLocationId(locationId);
	    temp.setCountryId(countryId);
	    temp.setFirstName(firstName);
	    temp.setLastName(lastName);
	    temp.setSalary(salary);
	    temp.setCommissionPct(commissionPct);
	    temp.setDepartmentName(departmentName);
	    temp.setJobTitle(jobTitle);
	    temp.setCity(city);
	    temp.setStateProvince(stateProvince);
	    temp.setCountryName(countryName);
	    temp.setRegionName(regionName);
		LOGGER.debug("Getting EmpDetailsView with id: {}" , temp);
		EmpDetailsView instance = empDetailsViewService.findById(temp);
		LOGGER.debug("EmpDetailsView details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the EmpDetailsView instance associated with the given composite-id.")
	public boolean deleteEmpDetailsView( @RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") BigDecimal salary, @RequestParam("commissionPct") BigDecimal commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName)throws EntityNotFoundException {
	    EmpDetailsViewId temp = new EmpDetailsViewId();
        temp.setEmployeeId(employeeId);
        temp.setJobId(jobId);
        temp.setManagerId(managerId);
        temp.setDepartmentId(departmentId);
        temp.setLocationId(locationId);
        temp.setCountryId(countryId);
        temp.setFirstName(firstName);
        temp.setLastName(lastName);
        temp.setSalary(salary);
        temp.setCommissionPct(commissionPct);
        temp.setDepartmentName(departmentName);
        temp.setJobTitle(jobTitle);
        temp.setCity(city);
        temp.setStateProvince(stateProvince);
        temp.setCountryName(countryName);
        temp.setRegionName(regionName);
		LOGGER.debug("Deleting EmpDetailsView with id: {}" , temp);
		EmpDetailsView deleted = empDetailsViewService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the EmpDetailsView instance associated with the given composite-id.")
	public EmpDetailsView editEmpDetailsView( @RequestParam("employeeId") Integer employeeId, @RequestParam("jobId") String jobId, @RequestParam("managerId") Integer managerId, @RequestParam("departmentId") Short departmentId, @RequestParam("locationId") Short locationId, @RequestParam("countryId") String countryId, @RequestParam("firstName") String firstName, @RequestParam("lastName") String lastName, @RequestParam("salary") BigDecimal salary, @RequestParam("commissionPct") BigDecimal commissionPct, @RequestParam("departmentName") String departmentName, @RequestParam("jobTitle") String jobTitle, @RequestParam("city") String city, @RequestParam("stateProvince") String stateProvince, @RequestParam("countryName") String countryName, @RequestParam("regionName") String regionName, @RequestBody EmpDetailsView instance) throws EntityNotFoundException {
	    EmpDetailsViewId temp = new EmpDetailsViewId();
         temp.setEmployeeId(employeeId);
         temp.setJobId(jobId);
         temp.setManagerId(managerId);
         temp.setDepartmentId(departmentId);
         temp.setLocationId(locationId);
         temp.setCountryId(countryId);
         temp.setFirstName(firstName);
         temp.setLastName(lastName);
         temp.setSalary(salary);
         temp.setCommissionPct(commissionPct);
         temp.setDepartmentName(departmentName);
         temp.setJobTitle(jobTitle);
         temp.setCity(city);
         temp.setStateProvince(stateProvince);
         temp.setCountryName(countryName);
         temp.setRegionName(regionName);
        empDetailsViewService.delete(temp);
        instance = empDetailsViewService.create(instance);
	    LOGGER.debug("EmpDetailsView details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmpDetailsView instance.")
	public EmpDetailsView createEmpDetailsView(@RequestBody EmpDetailsView instance) {
		LOGGER.debug("Create EmpDetailsView with information: {}" , instance);
		instance = empDetailsViewService.create(instance);
		LOGGER.debug("Created EmpDetailsView with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmpDetailsViewService(EmpDetailsViewService service) {
		this.empDetailsViewService = service;
	}
}


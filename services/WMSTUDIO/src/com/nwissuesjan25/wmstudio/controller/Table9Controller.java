/*Generated by WaveMaker Studio*/

package com.nwissuesjan25.wmstudio.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.nwissuesjan25.wmstudio.service.Table9Service;
import java.math.BigDecimal;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.nwissuesjan25.wmstudio.*;
import com.nwissuesjan25.wmstudio.service.*;


/**
 * Controller object for domain model class Table9.
 * @see com.nwissuesjan25.wmstudio.Table9
 */

@RestController(value = "WMSTUDIO.Table9Controller")
@Api(value = "/WMSTUDIO/Table9", description = "Exposes APIs to work with Table9 resource.")
@RequestMapping("/WMSTUDIO/Table9")
public class Table9Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(Table9Controller.class);

	@Autowired
	@Qualifier("WMSTUDIO.Table9Service")
	private Table9Service table9Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Table9 instances matching the search criteria.")
	public Page<Table9> findTable9s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Table9s list");
		return table9Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Table9 instances.")
	public Page<Table9> getTable9s(Pageable pageable) {
		LOGGER.debug("Rendering Table9s list");
		return table9Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Table9 instances.")
	public Long countAllTable9s() {
		LOGGER.debug("counting Table9s");
		Long count = table9Service.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Table9 instance associated with the given id.")
    public Table9 getTable9(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting Table9 with id: {}" , id);
        Table9 instance = table9Service.findById(id);
        LOGGER.debug("Table9 details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Table9 instance associated with the given id.")
    public boolean deleteTable9(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Table9 with id: {}" , id);
        Table9 deleted = table9Service.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Table9 instance associated with the given id.")
    public Table9 editTable9(@PathVariable("id") BigDecimal id, @RequestBody Table9 instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Table9 with id: {}" , instance.getId());
        instance.setId(id);
        instance = table9Service.update(instance);
        LOGGER.debug("Table9 details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Table9 instance.")
	public Table9 createTable9(@RequestBody Table9 instance) {
		LOGGER.debug("Create Table9 with information: {}" , instance);
		instance = table9Service.create(instance);
		LOGGER.debug("Created Table9 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTable9Service(Table9Service service) {
		this.table9Service = service;
	}
}

